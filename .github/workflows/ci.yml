# This workflow will build a Java project with Maven
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven

name: Continuous Integration with Maven

on:
  push:
    branches: [ github_actions ]

env:
  registry-name: ghcr.io

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Cache local Maven repository
      uses: actions/cache@v2
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-maven-
    - name: Cache embedded MongoDB for unit tests
      uses: actions/cache@v2
      with:
        path: ~/.embedmongo/**/*.tgz
        key: ${{ runner.os }}-mongodb-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-mongodb-
    - name: Set up JDK 11
      uses: actions/setup-java@v1
      with:
        java-version: '11'
    - name: Login to GitHub Packages Docker Registry
      uses: docker/login-action@v1
      with:
        registry: ${{ env.registry-name }}
        username: ${{ github.repository_owner }}
        password: ${{ secrets.CR_PAT }}
    - name: Build all components incl. running unit tests
      run: mvn install -B -e -DcreateJavadoc=true -Ddocker.registry-name=${{ env.registry-name }} -Ddocker.image.org-name=${{ github.repository_owner }} -Pbuild-docker-image,docker-push-image

  integration-test:
    needs: build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        device-registry: [file,mongodb]
    steps:
    - uses: actions/checkout@v2
    - name: Cache local Maven repository
      uses: actions/cache@v2
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-maven-
    - name: Set up JDK 11
      uses: actions/setup-java@v1
      with:
        java-version: '11'
    - name: Login to GitHub Packages Docker Registry
      uses: docker/login-action@v1
      with:
        registry: ${{ env.registry-name }}
        username: ${{ github.repository_owner }}
        password: ${{ secrets.CR_PAT }}
    - name: Run integration tests
      run: mvn verify -B -e -DCI=$CI -Ddocker.registry-name=${{ env.registry-name }} -Ddocker.image.org-name=${{ github.repository_owner }} -Dhono.deviceregistry.type=${{ matrix.device-registry }} -pl :hono-tests -Prun-tests
